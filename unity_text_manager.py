#!/usr/bin/env python3
"""
Unity Text Manager - Logiciel complet de gestion des textes Unity
Version corrig√©e avec am√©lioration de l'interface utilisateur et gestion d'erreurs robuste
Permet de scanner, extraire, traduire et r√©injecter les textes des jeux Unity

CORRECTIONS APPORT√âES:
- Ajout d'un bouton pour supprimer des fichiers de la liste
- Correction du probl√®me de sauvegarde avec l'encodage UTF-8
- Correction du probl√®me d'export avec le param√®tre initialfilename -> initialfile
- Am√©lioration de la gestion des erreurs
"""
import os
import sys
import json
import shutil
import threading
from pathlib import Path
import tkinter as tk
from tkinter import filedialog, messagebox, scrolledtext
from tkinter import ttk
from datetime import datetime
from typing import Optional, Dict, List

# Marquer openai_translator comme non disponible (remplac√© par intelligent_translator)
OPENAI_AVAILABLE = False

# Importer le traducteur intelligent
try:
    from intelligent_translator_adapter import IntelligentTranslatorAdapter
    INTELLIGENT_TRANSLATOR_AVAILABLE = True
    print("‚úÖ Traducteur intelligent disponible")
except ImportError as e:
    print(f"Erreur lors de l'import du traducteur intelligent: {e}")
    INTELLIGENT_TRANSLATOR_AVAILABLE = False
    IntelligentTranslatorAdapter = None

try:
    from unity_scanner import UnityTextScanner
except ImportError as e:
    print(f"Erreur lors de l'import de unity_scanner: {e}")
    UnityTextScanner = None

try:
    from unity_injector import UnityTextInjector
except ImportError as e:
    print(f"Erreur lors de l'import de unity_injector: {e}")
    UnityTextInjector = None

try:
    from text_redirector import TextRedirector
except ImportError as e:
    print(f"Erreur lors de l'import de text_redirector: {e}")
    class TextRedirector:
        def __init__(self, widget):
            self.widget = widget
        def write(self, string):
            if hasattr(self.widget, 'insert'):
                self.widget.insert(tk.END, string)
                self.widget.see(tk.END)
        def flush(self):
            pass


class UnityTextManagerGUI:
    """Interface graphique principal du Unity Text Manager"""
    
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("Unity Text Manager v2.0 - Gestionnaire de Textes Unity")
        self.root.geometry("1100x750")
        self.root.minsize(900, 650)
        
        # Configuration de l'ic√¥ne et du style
        try:
            # Tenter de d√©finir une ic√¥ne si elle existe
            if hasattr(tk, 'PhotoImage'):
                self.root.iconbitmap(default='icon.ico')  # Optionnel
        except:
            pass
        
        # Variables d'√©tat
        self.game_path = tk.StringVar()
        self.current_texts: Optional[Dict] = None
        self.scanning = False
        self.injecting = False
        self.translating = False
        self.stop_translation = False
        
        # Variables de configuration
        self.confirm_actions_var = tk.BooleanVar(value=True)  # Demander confirmation par d√©faut
        self.auto_save_var = tk.BooleanVar(value=False)  # Auto-sauvegarde d√©sactiv√©e par d√©faut
        
        # Syst√®me de traduction intelligent
        self.intelligent_translator: Optional[IntelligentTranslatorAdapter] = None
        
        # Configuration interface
        self.setup_styles()
        self.create_interface()
        self.setup_logging()
        
        # Gestion de la fermeture
        self.root.protocol("WM_DELETE_WINDOW", self.on_closing)

    def setup_styles(self):
        """Configure les styles personnalis√©s"""
        style = ttk.Style()
        
        # Style pour le titre
        style.configure('Title.TLabel', font=('Arial', 16, 'bold'))
        
        # Style pour les boutons d'action
        style.configure('Action.TButton', font=('Arial', 10, 'bold'))
        
        # Style pour les boutons de danger
        style.configure('Danger.TButton', foreground='red')
        
        # Style pour les boutons d'avertissement
        style.configure('Warning.TButton', foreground='orange')
        
        # Style pour la barre de progression
        style.configure('Custom.Horizontal.TProgressbar', thickness=20)
        
        # Style pour le Treeview
        style.configure('Treeview', font=('Arial', 9))
        style.configure('Treeview.Heading', font=('Arial', 9, 'bold'))

    def create_interface(self):
        """Cr√©e l'interface graphique am√©lior√©e"""
        # Frame principal avec padding
        main_frame = ttk.Frame(self.root, padding="15")
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # En-t√™te avec titre et informations
        self.create_header(main_frame)
        
        # Notebook pour les onglets
        self.notebook = ttk.Notebook(main_frame)
        self.notebook.pack(fill=tk.BOTH, expand=True, pady=(10, 0))
        
        # Cr√©er les onglets
        self.create_scanner_tab()
        self.create_editor_tab()
        self.create_injection_tab()
        
        # Frame pour les logs (en bas)
        self.create_log_section(main_frame)

    def create_header(self, parent):
        """Cr√©e l'en-t√™te de l'application"""
        header_frame = ttk.Frame(parent)
        header_frame.pack(fill=tk.X, pady=(0, 10))
        
        # Titre
        title_label = ttk.Label(
            header_frame, 
            text="Unity Text Manager", 
            style='Title.TLabel'
        )
        title_label.pack(side=tk.LEFT)
        
        # Informations de version et statut
        info_frame = ttk.Frame(header_frame)
        info_frame.pack(side=tk.RIGHT)
        
        version_label = ttk.Label(info_frame, text="v2.0", foreground='gray')
        version_label.pack(side=tk.TOP, anchor=tk.E)
        
        self.status_indicator = ttk.Label(
            info_frame, 
            text="‚óè Pr√™t", 
            foreground='green'
        )
        self.status_indicator.pack(side=tk.BOTTOM, anchor=tk.E)

    def create_scanner_tab(self):
        """Cr√©e l'onglet de scan am√©lior√©"""
        scanner_frame = ttk.Frame(self.notebook, padding="15")
        self.notebook.add(scanner_frame, text="üìÅ 1. Scanner")
        
        # Section s√©lection du dossier
        path_section = ttk.LabelFrame(scanner_frame, text="Dossier du jeu Unity", padding="10")
        path_section.pack(fill=tk.X, pady=(0, 15))
        
        path_frame = ttk.Frame(path_section)
        path_frame.pack(fill=tk.X)
        
        self.path_entry = ttk.Entry(
            path_frame, 
            textvariable=self.game_path, 
            font=('Arial', 10),
            state='readonly'
        )
        self.path_entry.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=(0, 10))
        
        ttk.Button(
            path_frame, 
            text="üìÇ Parcourir dossier", 
            command=self.browse_folder
        ).pack(side=tk.RIGHT, padx=(5, 0))
        
        ttk.Button(
            path_frame, 
            text="üìÑ S√©lectionner fichier", 
            command=self.browse_file
        ).pack(side=tk.RIGHT)
        
        # Section options de scan
        options_section = ttk.LabelFrame(scanner_frame, text="Options de scan", padding="10")
        options_section.pack(fill=tk.X, pady=(0, 15))
        
        # Variables d'options
        self.scan_textassets = tk.BooleanVar(value=True)
        self.scan_monobehaviours = tk.BooleanVar(value=True)
        self.scan_textfiles = tk.BooleanVar(value=True)
        self.deep_scan = tk.BooleanVar(value=False)
        
        # Checkboxes avec descriptions
        options = [
            (self.scan_textassets, "üìÑ Scanner les TextAssets", "Assets texte Unity standard"),
            (self.scan_monobehaviours, "üîß Scanner les MonoBehaviours", "Scripts avec donn√©es texte"),
            (self.scan_textfiles, "üìù Scanner les fichiers texte", "Fichiers .json, .xml, .txt"),
            (self.deep_scan, "üîç Scan approfondi", "Analyse plus pouss√©e (plus lent)")
        ]
        
        for var, text, description in options:
            frame = ttk.Frame(options_section)
            frame.pack(fill=tk.X, pady=2)
            
            ttk.Checkbutton(frame, text=text, variable=var).pack(side=tk.LEFT)
            ttk.Label(frame, text=f"‚Äî {description}", foreground='gray').pack(side=tk.LEFT, padx=(10, 0))
        
        # Section contr√¥les
        control_section = ttk.Frame(scanner_frame)
        control_section.pack(fill=tk.X, pady=(0, 15))
        
        self.scan_button = ttk.Button(
            control_section,
            text="üöÄ D√©marrer le scan",
            command=self.start_scan,
            style='Action.TButton'
        )
        self.scan_button.pack(side=tk.LEFT, padx=(0, 10))
        
        ttk.Button(
            control_section,
            text="üìÇ Charger un scan existant",
            command=self.load_scan
        ).pack(side=tk.LEFT, padx=(0, 10))
        
        # Bouton de d√©cryptage XOR manuel
        ttk.Button(
            control_section,
            text="üîì D√©cryptage XOR",
            command=self.start_manual_xor_decrypt,
            style='Warning.TButton'
        ).pack(side=tk.LEFT)
        
        # Bouton d'arr√™t (initialement cach√©)
        self.stop_scan_button = ttk.Button(
            control_section,
            text="‚èπÔ∏è Arr√™ter",
            command=self.stop_current_scan,
            style='Danger.TButton'
        )
        
        # Section progression
        progress_section = ttk.LabelFrame(scanner_frame, text="Progression", padding="10")
        progress_section.pack(fill=tk.X, pady=(0, 10))
        
        self.progress_var = tk.DoubleVar()
        self.progress_bar = ttk.Progressbar(
            progress_section, 
            variable=self.progress_var, 
            maximum=100,
            length=400
        )
        self.progress_bar.pack(fill=tk.X, pady=(0, 5))
        
        self.status_label = ttk.Label(
            progress_section, 
            text="S√©lectionnez un dossier et d√©marrez le scan"
        )
        self.status_label.pack(anchor=tk.W)

    def create_editor_tab(self):
        """Cr√©e l'onglet d'√©dition am√©lior√©"""
        editor_frame = ttk.Frame(self.notebook, padding="15")
        self.notebook.add(editor_frame, text="‚úèÔ∏è 2. √âditeur", state="disabled")
        
        # Barre d'outils
        toolbar = ttk.Frame(editor_frame)
        toolbar.pack(fill=tk.X, pady=(0, 15))
        
        # Section de gauche - Outils principaux
        left_tools = ttk.Frame(toolbar)
        left_tools.pack(side=tk.LEFT, fill=tk.X, expand=True)
        
        ttk.Button(
            left_tools,
            text="üì§ Exporter",
            command=self.export_for_translation
        ).pack(side=tk.LEFT, padx=(0, 5))
        
        ttk.Button(
            left_tools,
            text="üì• Importer",
            command=self.import_translations
        ).pack(side=tk.LEFT, padx=(0, 5))
        
        # Traduction automatique avec indicateur de disponibilit√©
        if INTELLIGENT_TRANSLATOR_AVAILABLE:
            self.auto_translate_button = ttk.Button(
                left_tools,
                text="üß† Traduction intelligente",
                command=self.setup_intelligent_translation,
                style='Success.TButton'
            )
        else:
            self.auto_translate_button = ttk.Button(
                left_tools,
                text="ü§ñ Traduction auto (non disponible)",
                state='disabled',
                style='TButton'
            )   
        self.auto_translate_button.pack(side=tk.LEFT, padx=(5, 0))
        
        # Section de droite - Outils secondaires
        right_tools = ttk.Frame(toolbar)
        right_tools.pack(side=tk.RIGHT)
        
        # NOUVEAU: Bouton pour supprimer des √©l√©ments
        ttk.Button(
            right_tools,
            text="üóëÔ∏è Supprimer s√©lection",
            command=self.remove_selected_texts,
            style='Danger.TButton'
        ).pack(side=tk.LEFT, padx=(0, 5))
        
        # NOUVEAU: Bouton pour filtrer les TextAssets uniquement
        ttk.Button(
            right_tools,
            text="üìÑ TextAssets uniquement",
            command=self.filter_textassets_only,
            style='Warning.TButton'
        ).pack(side=tk.LEFT, padx=(0, 5))
        
        ttk.Button(
            right_tools,
            text="üßπ Vider cache",
            command=self.clear_cache
        ).pack(side=tk.LEFT, padx=(0, 5))
        
        ttk.Button(
            right_tools,
            text="üíæ Sauvegarder",
            command=self.save_current_texts,
            style='Action.TButton'
        ).pack(side=tk.LEFT)
        
        # Statistiques avec design am√©lior√©
        stats_frame = ttk.LabelFrame(editor_frame, text="üìä Statistiques", padding="10")
        stats_frame.pack(fill=tk.X, pady=(0, 15))
        
        self.stats_label = ttk.Label(
            stats_frame, 
            text="Aucun texte charg√©",
            font=('Arial', 10)
        )
        self.stats_label.pack(anchor=tk.W)
        
        # Barre de progression des traductions
        self.translation_progress = ttk.Progressbar(
            stats_frame, 
            maximum=100,
            length=200
        )
        self.translation_progress.pack(fill=tk.X, pady=(5, 0))
        
        # Liste des textes avec recherche
        list_section = ttk.LabelFrame(editor_frame, text="üìù Textes trouv√©s", padding="5")
        list_section.pack(fill=tk.BOTH, expand=True)
        
        # Barre de recherche
        search_frame = ttk.Frame(list_section)
        search_frame.pack(fill=tk.X, pady=(0, 10))
        
        ttk.Label(search_frame, text="üîç Rechercher:").pack(side=tk.LEFT)
        
        self.search_var = tk.StringVar()
        self.search_var.trace('w', self.filter_text_list)
        
        search_entry = ttk.Entry(search_frame, textvariable=self.search_var)
        search_entry.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=(5, 10))
        
        # Filtre par statut
        ttk.Label(search_frame, text="Statut:").pack(side=tk.LEFT)
        
        self.filter_var = tk.StringVar(value="Tous")
        filter_combo = ttk.Combobox(
            search_frame,
            textvariable=self.filter_var,
            values=["Tous", "Traduit", "Original"],
            state="readonly",
            width=10
        )
        filter_combo.pack(side=tk.LEFT, padx=(5, 0))
        filter_combo.bind('<<ComboboxSelected>>', lambda e: self.filter_text_list())
        
        # Treeview am√©lior√© avec s√©lection multiple
        tree_frame = ttk.Frame(list_section)
        tree_frame.pack(fill=tk.BOTH, expand=True)
        
        columns = ('ID', 'Fichier', 'Asset', 'Type', 'Longueur', 'Statut')
        self.text_tree = ttk.Treeview(
            tree_frame, 
            columns=columns, 
            show='headings',
            height=15,
            selectmode='extended'  # Permet la s√©lection multiple
        )
        
        # Configuration des colonnes
        column_config = {
            'ID': (80, 'center'),
            'Fichier': (150, 'w'),
            'Asset': (200, 'w'),
            'Type': (100, 'center'),
            'Longueur': (80, 'center'),
            'Statut': (100, 'center')
        }
        
        for col, (width, anchor) in column_config.items():
            self.text_tree.heading(col, text=col, command=lambda c=col: self.sort_tree(c))
            self.text_tree.column(col, width=width, anchor=anchor)
        
        # Scrollbars
        v_scrollbar = ttk.Scrollbar(tree_frame, orient=tk.VERTICAL, command=self.text_tree.yview)
        h_scrollbar = ttk.Scrollbar(tree_frame, orient=tk.HORIZONTAL, command=self.text_tree.xview)
        
        self.text_tree.configure(yscrollcommand=v_scrollbar.set, xscrollcommand=h_scrollbar.set)
        
        # Placement avec grid pour un meilleur contr√¥le
        self.text_tree.grid(row=0, column=0, sticky='nsew')
        v_scrollbar.grid(row=0, column=1, sticky='ns')
        h_scrollbar.grid(row=1, column=0, sticky='ew')
        
        tree_frame.grid_rowconfigure(0, weight=1)
        tree_frame.grid_columnconfigure(0, weight=1)
        
        # Binds pour la s√©lection et raccourcis clavier
        self.text_tree.bind('<<TreeviewSelect>>', self.on_text_select)
        self.text_tree.bind('<Double-1>', self.on_text_double_click)
        self.text_tree.bind('<Button-3>', self.show_context_menu)  # Clic droit
        
        # Raccourcis clavier pour s√©lection
        self.text_tree.bind('<Control-a>', self.select_all_texts)
        self.text_tree.bind('<Control-A>', self.select_all_texts)  # Majuscule aussi
        self.text_tree.bind('<Escape>', self.deselect_all_texts)  # √âchap pour d√©s√©lectionner
        self.text_tree.bind('<Delete>', self.delete_selected_texts)  # Suppr pour supprimer
        
        # Focus sur le TreeView pour les raccourcis clavier
        self.text_tree.focus_set()
        
        # Cr√©er le menu contextuel
        self.create_context_menu()

    def create_injection_tab(self):
        """Cr√©e l'onglet d'injection am√©lior√©"""
        injection_frame = ttk.Frame(self.notebook, padding="15")
        self.notebook.add(injection_frame, text="‚ö° 3. Injection", state="disabled")
        
        # Avertissement de s√©curit√©
        warning_section = ttk.LabelFrame(
            injection_frame, 
            text="‚ö†Ô∏è Avertissement de s√©curit√©", 
            padding="15"
        )
        warning_section.pack(fill=tk.X, pady=(0, 20))
        
        warning_text = (
            "L'injection modifie directement les fichiers du jeu.\n"
            "‚Ä¢ Une sauvegarde automatique sera cr√©√©e avant toute modification\n"
            "‚Ä¢ V√©rifiez que vous avez une copie compl√®te du jeu\n"
            "‚Ä¢ Testez sur une copie de sauvegarde avant d'appliquer au jeu principal\n"
            "‚Ä¢ Cette op√©ration est irr√©versible sans restauration manuelle"
        )
        
        warning_label = ttk.Label(
            warning_section, 
            text=warning_text,
            foreground='red',
            font=('Arial', 10)
        )
        warning_label.pack(anchor=tk.W)
        
        # Section pr√©paration
        prep_section = ttk.LabelFrame(injection_frame, text="üìã Pr√©paration", padding="10")
        prep_section.pack(fill=tk.X, pady=(0, 20))
        
        # Statistiques pr√©-injection
        self.injection_stats = ttk.Label(
            prep_section,
            text="Chargez d'abord des textes traduits...",
            font=('Arial', 10)
        )
        self.injection_stats.pack(anchor=tk.W, pady=(0, 10))
        
        # Options d'injection
        options_frame = ttk.Frame(prep_section)
        options_frame.pack(fill=tk.X)
        
        self.create_backup_var = tk.BooleanVar(value=True)
        self.verify_integrity_var = tk.BooleanVar(value=True)
        self.dry_run_var = tk.BooleanVar(value=False)
        
        ttk.Checkbutton(
            options_frame,
            text="üì¶ Cr√©er une sauvegarde compl√®te",
            variable=self.create_backup_var
        ).pack(anchor=tk.W)
        
        ttk.Checkbutton(
            options_frame,
            text="üîç V√©rifier l'int√©grit√© apr√®s injection",
            variable=self.verify_integrity_var
        ).pack(anchor=tk.W)
        
        ttk.Checkbutton(
            options_frame,
            text="üß™ Mode test (simulation sans modification)",
            variable=self.dry_run_var
        ).pack(anchor=tk.W)
        
        # Section contr√¥les d'injection
        control_section = ttk.LabelFrame(injection_frame, text="üöÄ Injection", padding="15")
        control_section.pack(fill=tk.X, pady=(0, 20))
        
        control_buttons = ttk.Frame(control_section)
        control_buttons.pack(fill=tk.X)
        
        self.inject_button = ttk.Button(
            control_buttons,
            text="‚ö° Injecter les traductions",
            command=self.start_injection,
            style='Warning.TButton'
        )
        self.inject_button.pack(side=tk.LEFT, padx=(0, 10))
        
        self.stop_inject_button = ttk.Button(
            control_buttons,
            text="‚èπÔ∏è Arr√™ter l'injection",
            command=self.stop_current_injection,
            style='Danger.TButton'
        )
        
        # Section progression
        progress_section = ttk.LabelFrame(injection_frame, text="üìà Progression", padding="10")
        progress_section.pack(fill=tk.BOTH, expand=True)
        
        self.inject_progress_var = tk.DoubleVar()
        self.inject_progress_bar = ttk.Progressbar(
            progress_section,
            variable=self.inject_progress_var,
            maximum=100
        )
        self.inject_progress_bar.pack(fill=tk.X, pady=(0, 10))
        
        self.inject_status_label = ttk.Label(
            progress_section,
            text="Pr√™t pour l'injection"
        )
        self.inject_status_label.pack(anchor=tk.W)
        
        # Log d'injection en temps r√©el
        log_frame = ttk.Frame(progress_section)
        log_frame.pack(fill=tk.BOTH, expand=True, pady=(10, 0))
        
        self.injection_log = scrolledtext.ScrolledText(
            log_frame,
            height=8,
            wrap=tk.WORD,
            font=('Consolas', 9)
        )
        self.injection_log.pack(fill=tk.BOTH, expand=True)


    def create_log_section(self, parent):
        """Cr√©e la section des logs"""
        log_frame = ttk.LabelFrame(parent, text="üìã Journal d'activit√©", padding="5")
        log_frame.pack(fill=tk.BOTH, expand=True, pady=(15, 0))
        
        # Frame pour les contr√¥les des logs
        log_controls = ttk.Frame(log_frame)
        log_controls.pack(fill=tk.X, pady=(0, 5))
        
        ttk.Button(
            log_controls,
            text="üßπ Vider",
            command=self.clear_logs
        ).pack(side=tk.LEFT)
        
        ttk.Button(
            log_controls,
            text="üíæ Sauvegarder logs",
            command=self.save_logs
        ).pack(side=tk.LEFT, padx=(5, 0))
        
        # Zone de texte pour les logs
        self.log_text = scrolledtext.ScrolledText(
            log_frame,
            height=8,
            wrap=tk.WORD,
            font=('Consolas', 9)
        )
        self.log_text.pack(fill=tk.BOTH, expand=True)

    def setup_logging(self):
        """Configure la redirection des logs"""
        if hasattr(sys, 'stdout'):
            sys.stdout = TextRedirector(self.log_text)

    def update_status_indicator(self, text: str, color: str = 'green'):
        """Met √† jour l'indicateur de statut"""
        self.status_indicator.config(text=f"‚óè {text}", foreground=color)

    def clear_logs(self):
        """Vide les logs"""
        self.log_text.delete(1.0, tk.END)

    def save_logs(self):
        """Sauvegarde les logs dans un fichier"""
        try:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"logs_unity_manager_{timestamp}.txt"
            
            content = self.log_text.get(1.0, tk.END)
            with open(filename, 'w', encoding='utf-8') as f:
                f.write(f"Unity Text Manager - Logs du {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
                f.write("=" * 60 + "\n\n")
                f.write(content)
            
            messagebox.showinfo("Logs sauvegard√©s", f"Logs sauvegard√©s dans: {filename}")
            
        except Exception as e:
            messagebox.showerror("Erreur", f"Impossible de sauvegarder les logs: {e}")


    def sort_tree(self, column):
        """Trie le TreeView par colonne"""
        items = list(self.text_tree.get_children(''))
        items.sort(key=lambda x: self.text_tree.set(x, column))
        
        for index, item in enumerate(items):
            self.text_tree.move(item, '', index)

    def filter_text_list(self, *args):
        """Filtre la liste des textes selon la recherche et le filtre"""
        if not self.current_texts:
            return
        
        search_term = self.search_var.get().lower()
        filter_status = self.filter_var.get()
        
        # Vider le TreeView
        for item in self.text_tree.get_children():
            self.text_tree.delete(item)
        
        # R√©appliquer les √©l√©ments filtr√©s
        for text_entry in self.current_texts['texts']:
            # Filtrer par recherche
            if search_term:
                searchable_text = (
                    text_entry.get('asset_name', '') + ' ' +
                    text_entry.get('original_text', '')
                ).lower()
                
                if search_term not in searchable_text:
                    continue
            
            # Filtrer par statut
            is_translated = text_entry.get('is_translated', False)
            if filter_status == "Traduit" and not is_translated:
                continue
            elif filter_status == "Original" and is_translated:
                continue
            
            # Ajouter l'√©l√©ment
            self.add_text_to_tree(text_entry)

    def add_text_to_tree(self, text_entry):
        """Ajoute un texte au TreeView"""
        status = "‚úÖ Traduit" if text_entry.get('is_translated', False) else "üìù Original"
        file_name = Path(text_entry['source_file']).name
        text_length = len(text_entry.get('original_text', ''))
        
        self.text_tree.insert('', tk.END, values=(
            text_entry['id'],
            file_name,
            text_entry.get('asset_name', ''),
            text_entry.get('asset_type', ''),
            text_length,
            status
        ))

    def on_text_select(self, event):
        """Appel√© quand un texte est s√©lectionn√©"""
        # Afficher le nombre d'√©l√©ments s√©lectionn√©s
        selected_count = len(self.text_tree.selection())
        if selected_count > 1:
            self.update_status_indicator(f"{selected_count} √©l√©ments s√©lectionn√©s", 'blue')
        elif selected_count == 1:
            self.update_status_indicator("1 √©l√©ment s√©lectionn√©", 'blue')
        else:
            self.update_status_indicator("Pr√™t", 'green')

    def on_text_double_click(self, event):
        """Appel√© lors du double-clic sur un texte"""
        selection = self.text_tree.selection()
        if not selection:
            return
        
        item = self.text_tree.item(selection[0])
        text_id = item['values'][0]
        
        # Trouver le texte correspondant
        text_entry = self.find_text_by_id(text_id)
        if text_entry:
            self.show_text_editor(text_entry)

    def find_text_by_id(self, text_id: str) -> Optional[Dict]:
        """Trouve un texte par son ID"""
        if not self.current_texts:
            return None
        
        for text_entry in self.current_texts['texts']:
            if text_entry['id'] == text_id:
                return text_entry
        
        return None

    def select_all_texts(self, event=None):
        """S√©lectionne tous les textes dans le TreeView (Ctrl+A)"""
        if not self.current_texts:
            return 'break'
        
        # S√©lectionner tous les √©l√©ments
        all_items = self.text_tree.get_children()
        if all_items:
            self.text_tree.selection_set(all_items)
            self.update_status_indicator(f"Tous les {len(all_items)} √©l√©ments s√©lectionn√©s", 'blue')
            print(f"üìã Tous les {len(all_items)} √©l√©ments s√©lectionn√©s avec Ctrl+A")
        
        return 'break'  # Emp√™che la propagation de l'√©v√©nement

    def deselect_all_texts(self, event=None):
        """D√©s√©lectionne tous les textes dans le TreeView (√âchap)"""
        self.text_tree.selection_remove(self.text_tree.selection())
        self.update_status_indicator("Pr√™t", 'green')
        print("üìã S√©lection effac√©e avec √âchap")
        return 'break'

    def delete_selected_texts(self, event=None):
        """Supprime les textes s√©lectionn√©s avec la touche Suppr"""
        if self.text_tree.selection():
            self.remove_selected_texts()
        return 'break'

    def remove_selected_texts(self):
        """NOUVEAU: Supprime les textes s√©lectionn√©s de la liste"""
        if not self.current_texts:
            messagebox.showerror("Erreur", "Aucun texte charg√©")
            return
        
        selected_items = self.text_tree.selection()
        if not selected_items:
            messagebox.showwarning("Attention", "Veuillez s√©lectionner au moins un √©l√©ment √† supprimer")
            return
        
        # Demander confirmation
        count = len(selected_items)
        if self.confirm_actions_var.get():
            result = messagebox.askyesno(
                "Confirmation de suppression",
                f"Voulez-vous vraiment supprimer {count} √©l√©ment(s) de la liste ?\n\n"
                f"‚ö†Ô∏è Cette action ne peut pas √™tre annul√©e.\n"
                f"Les fichiers originaux ne seront pas affect√©s."
            )
            if not result:
                return
        
        # R√©cup√©rer les IDs des √©l√©ments √† supprimer
        ids_to_remove = []
        for item in selected_items:
            item_values = self.text_tree.item(item)['values']
            if item_values:
                ids_to_remove.append(item_values[0])
        
        # Supprimer les textes de la liste
        original_count = len(self.current_texts['texts'])
        self.current_texts['texts'] = [
            text for text in self.current_texts['texts'] 
            if text['id'] not in ids_to_remove
        ]
        
        # Mettre √† jour le total
        self.current_texts['total_texts'] = len(self.current_texts['texts'])
        
        # Rafra√Æchir l'interface
        self.update_text_list()
        self.update_stats()
        
        removed_count = original_count - len(self.current_texts['texts'])
        messagebox.showinfo(
            "Suppression termin√©e",
            f"‚úÖ {removed_count} √©l√©ment(s) supprim√©(s) de la liste.\n"
            f"üìä Textes restants: {len(self.current_texts['texts'])}"
        )
        
        print(f"üóëÔ∏è {removed_count} textes supprim√©s de la liste")

    def filter_textassets_only(self):
        """NOUVEAU: Filtre pour ne garder que les TextAssets"""
        if not self.current_texts:
            messagebox.showerror("Erreur", "Aucun texte charg√©")
            return
        
        # Compter les TextAssets actuels
        textasset_count = len([
            t for t in self.current_texts['texts'] 
            if t.get('asset_type', '').lower() == 'textasset'
        ])
        
        total_count = len(self.current_texts['texts'])
        other_count = total_count - textasset_count
        
        if other_count == 0:
            messagebox.showinfo("Information", "‚úÖ Seuls des TextAssets sont d√©j√† pr√©sents dans la liste")
            return
        
        # Demander confirmation
        if self.confirm_actions_var.get():
            result = messagebox.askyesno(
                "Filtrer les TextAssets",
                f"üìÑ Filtrage des TextAssets uniquement\n\n"
                f"Cette action va supprimer {other_count} √©l√©ments qui ne sont pas des TextAssets.\n"
                f"TextAssets conserv√©s: {textasset_count}\n"
                f"Autres types supprim√©s: {other_count}\n\n"
                f"‚ö†Ô∏è Cette action ne peut pas √™tre annul√©e.\n"
                f"Les fichiers originaux ne seront pas affect√©s.\n\n"
                f"Voulez-vous continuer ?"
            )
            if not result:
                return
        
        # Filtrer pour ne garder que les TextAssets
        original_count = len(self.current_texts['texts'])
        self.current_texts['texts'] = [
            text for text in self.current_texts['texts'] 
            if text.get('asset_type', '').lower() == 'textasset'
        ]
        
        # Mettre √† jour le total
        self.current_texts['total_texts'] = len(self.current_texts['texts'])
        
        # Rafra√Æchir l'interface
        self.update_text_list()
        self.update_stats()
        
        filtered_count = original_count - len(self.current_texts['texts'])
        messagebox.showinfo(
            "Filtrage termin√©",
            f"‚úÖ Filtrage des TextAssets termin√©.\n\n"
            f"üìÑ TextAssets conserv√©s: {len(self.current_texts['texts'])}\n"
            f"üóëÔ∏è Autres types supprim√©s: {filtered_count}\n\n"
            f"La traduction intelligente se concentrera maintenant\n"
            f"uniquement sur les TextAssets."
        )
        
        print(f"üìÑ Filtrage TextAssets: {len(self.current_texts['texts'])} conserv√©s, {filtered_count} supprim√©s")

    def create_context_menu(self):
        """Cr√©e le menu contextuel pour le TreeView"""
        self.context_menu = tk.Menu(self.root, tearoff=0)
        
        # Options de statut
        self.context_menu.add_command(
            label="üìù Marquer comme original",
            command=self.mark_as_original
        )
        self.context_menu.add_command(
            label="‚úÖ Marquer comme traduit", 
            command=self.mark_as_translated
        )
        self.context_menu.add_separator()
        
        # Options d'action
        self.context_menu.add_command(
            label="‚úèÔ∏è √âditer le texte",
            command=self.edit_selected_text
        )
        self.context_menu.add_command(
            label="üß† Traduire intelligemment",
            command=self.translate_selected_intelligently
        )
        self.context_menu.add_separator()
        
        # Options de manipulation
        self.context_menu.add_command(
            label="üóëÔ∏è Supprimer de la liste",
            command=self.remove_selected_texts
        )

    def show_context_menu(self, event):
        """Affiche le menu contextuel au clic droit"""
        # Identifier l'√©l√©ment sous le curseur
        item = self.text_tree.identify_row(event.y)
        if item:
            # S√©lectionner l'√©l√©ment si pas d√©j√† s√©lectionn√©
            if item not in self.text_tree.selection():
                self.text_tree.selection_set(item)
            
            # Obtenir les informations sur l'√©l√©ment s√©lectionn√©
            item_data = self.text_tree.item(item)
            text_id = item_data['values'][0]
            text_entry = self.find_text_by_id(text_id)
            
            # Adapter le menu selon le statut actuel
            is_translated = text_entry.get('is_translated', False) if text_entry else False
            
            # Activer/d√©sactiver les options selon le contexte
            if is_translated:
                self.context_menu.entryconfig(0, state="normal")  # Marquer original
                self.context_menu.entryconfig(1, state="disabled")  # Marquer traduit
                self.context_menu.entryconfig(4, state="disabled")  # Traduire
            else:
                self.context_menu.entryconfig(0, state="disabled")  # Marquer original
                self.context_menu.entryconfig(1, state="normal")  # Marquer traduit
                self.context_menu.entryconfig(4, state="normal")  # Traduire
            
            # Afficher le menu √† la position du curseur
            try:
                self.context_menu.tk_popup(event.x_root, event.y_root)
            finally:
                self.context_menu.grab_release()

    def mark_as_original(self):
        """Marque les textes s√©lectionn√©s comme originaux (non traduits)"""
        selected_items = self.text_tree.selection()
        if not selected_items:
            return
        
        updated_count = 0
        for item in selected_items:
            item_values = self.text_tree.item(item)['values']
            if item_values:
                text_id = item_values[0]
                text_entry = self.find_text_by_id(text_id)
                if text_entry and text_entry.get('is_translated', False):
                    text_entry['is_translated'] = False
                    # Optionnel : effacer la traduction
                    # text_entry['translated_text'] = ""
                    updated_count += 1
        
        if updated_count > 0:
            self.update_text_list()
            self.update_stats()
            print(f"üìù {updated_count} texte(s) marqu√©(s) comme original")

    def mark_as_translated(self):
        """Marque les textes s√©lectionn√©s comme traduits"""
        selected_items = self.text_tree.selection()
        if not selected_items:
            return
        
        updated_count = 0
        for item in selected_items:
            item_values = self.text_tree.item(item)['values']
            if item_values:
                text_id = item_values[0]
                text_entry = self.find_text_by_id(text_id)
                if text_entry and not text_entry.get('is_translated', False):
                    text_entry['is_translated'] = True
                    # S'assurer qu'il y a une traduction (m√™me si identique)
                    if not text_entry.get('translated_text', ''):
                        text_entry['translated_text'] = text_entry.get('original_text', '')
                    updated_count += 1
        
        if updated_count > 0:
            self.update_text_list()
            self.update_stats()
            print(f"‚úÖ {updated_count} texte(s) marqu√©(s) comme traduit")

    def edit_selected_text(self):
        """√âdite le texte s√©lectionn√©"""
        selected_items = self.text_tree.selection()
        if not selected_items:
            return
        
        # Prendre le premier √©l√©ment s√©lectionn√©
        item = selected_items[0]
        item_values = self.text_tree.item(item)['values']
        if item_values:
            text_id = item_values[0]
            text_entry = self.find_text_by_id(text_id)
            if text_entry:
                self.show_text_editor(text_entry)

    def translate_selected_intelligently(self):
        """Lance la traduction intelligente sur les textes s√©lectionn√©s"""
        if not INTELLIGENT_TRANSLATOR_AVAILABLE:
            messagebox.showerror("Erreur", "Traducteur intelligent non disponible")
            return
        
        selected_items = self.text_tree.selection()
        if not selected_items:
            return
        
        # R√©cup√©rer les textes s√©lectionn√©s
        texts_to_translate = []
        for item in selected_items:
            item_values = self.text_tree.item(item)['values']
            if item_values:
                text_id = item_values[0]
                text_entry = self.find_text_by_id(text_id)
                if text_entry:
                    texts_to_translate.append(text_entry)
        
        if not texts_to_translate:
            return
        
        # Demander confirmation
        count = len(texts_to_translate)
        result = messagebox.askyesno(
            "Traduction intelligente",
            f"Traduire intelligemment {count} texte(s) s√©lectionn√©(s) ?\n\n"
            f"Cette op√©ration utilisera l'API OpenAI."
        )
        
        if result:
            self.translate_selected_texts_worker(texts_to_translate)

    def translate_selected_texts_worker(self, texts_to_translate):
        """Thread worker pour traduire les textes s√©lectionn√©s"""
        def translate_worker():
            try:
                if not self.intelligent_translator:
                    self.intelligent_translator = IntelligentTranslatorAdapter()
                
                # Analyser le contexte si n√©cessaire
                if not self.intelligent_translator.context_analyzed:
                    self.intelligent_translator.analyze_global_context(self.current_texts['texts'])
                
                translated_count = 0
                for text_entry in texts_to_translate:
                    original_text = text_entry.get('original_text', '')
                    file_context = f"{text_entry.get('asset_type', 'Unity')} - {text_entry.get('asset_name', 'Asset')}"
                    
                    translated_text = self.intelligent_translator.translate_with_context(
                        original_text,
                        self.intelligent_translator.global_context,
                        file_context
                    )
                    
                    if translated_text != original_text:
                        text_entry['translated_text'] = translated_text
                        text_entry['is_translated'] = True
                        translated_count += 1
                
                # Mettre √† jour l'interface dans le thread principal
                self.root.after(0, self.update_text_list)
                self.root.after(0, self.update_stats)
                
                # Message de fin
                self.root.after(0, lambda: messagebox.showinfo(
                    "Traduction termin√©e",
                    f"‚úÖ {translated_count} texte(s) traduit(s) avec succ√®s!"
                ))
                
            except Exception as e:
                error_msg = str(e)
                self.root.after(0, lambda: messagebox.showerror(
                    "Erreur de traduction",
                    f"Erreur lors de la traduction:\n{error_msg}"
                ))
        
        # Lancer dans un thread s√©par√©
        import threading
        thread = threading.Thread(target=translate_worker)
        thread.daemon = True
        thread.start()

    def on_closing(self):
        """Gestion de la fermeture de l'application"""
        if self.scanning or self.translating or self.injecting:
            result = messagebox.askyesno(
                "Fermeture",
                "Une op√©ration est en cours. Voulez-vous vraiment fermer l'application ?"
            )
            if not result:
                return
        
        # Sauvegarder automatiquement si activ√©
        if hasattr(self, 'auto_save_var') and self.auto_save_var.get() and self.current_texts:
            try:
                self.save_current_texts()
            except:
                pass
        
        self.root.destroy()

    # --- M√©thodes utilitaires suppl√©mentaires ---
    
    def browse_folder(self):
        """Ouvre la bo√Æte de dialogue pour s√©lectionner un dossier"""
        folder_path = filedialog.askdirectory(
            title="S√©lectionnez le dossier du jeu Unity",
            initialdir=self.game_path.get() if self.game_path.get() else os.path.expanduser("~")
        )
        if folder_path:
            self.game_path.set(folder_path)
            self.update_status_indicator("Dossier s√©lectionn√©")

    def browse_file(self):
        """Ouvre la bo√Æte de dialogue pour s√©lectionner un fichier unique"""
        file_path = filedialog.askopenfilename(
            title="S√©lectionnez un fichier Unity √† analyser",
            initialdir=self.game_path.get() if self.game_path.get() else os.path.expanduser("~"),
            filetypes=[
                ("Tous les fichiers Unity", "*.assets;*.unity;*.asset;*.bundle;*.json;*.txt;*.xml"),
                ("Fichiers Assets", "*.assets"),
                ("Fichiers Unity Scene", "*.unity"),
                ("Fichiers Asset", "*.asset"),
                ("Fichiers Bundle", "*.bundle"),
                ("Fichiers JSON", "*.json"),
                ("Fichiers texte", "*.txt"),
                ("Fichiers XML", "*.xml"),
                ("Tous les fichiers", "*.*")
            ]
        )
        if file_path:
            # D√©finir le chemin du fichier comme chemin de travail
            self.game_path.set(file_path)
            self.update_status_indicator("Fichier s√©lectionn√©")
            print(f"üìÑ Fichier s√©lectionn√©: {Path(file_path).name}")
            print(f"üìÅ Chemin complet: {file_path}")

    def stop_current_scan(self):
        """Arr√™te le scan en cours"""
        if hasattr(self, 'scan_stop_flag'):
            self.scan_stop_flag = True
            self.status_label.config(text="Arr√™t en cours...")
            self.log("‚èπÔ∏è Arr√™t du scan demand√© par l'utilisateur")

    def start_manual_xor_decrypt(self):
        """Lance le d√©cryptage XOR manuel"""
        if not self.game_path.get():
            messagebox.showwarning("Dossier manquant", "Veuillez s√©lectionner un dossier de jeu d'abord.")
            return
        
        # Cr√©er une fen√™tre de dialogue pour le d√©cryptage XOR
        xor_window = tk.Toplevel(self.root)
        xor_window.title("D√©cryptage XOR Manuel")
        xor_window.geometry("600x400")
        xor_window.transient(self.root)
        xor_window.grab_set()
        
        # Frame principal
        main_frame = ttk.Frame(xor_window, padding="15")
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # Titre et description
        ttk.Label(main_frame, text="üîì D√©cryptage XOR Manuel", font=('Arial', 14, 'bold')).pack(pady=(0, 10))
        
        description = ttk.Label(
            main_frame, 
            text="Cette fonction force le d√©cryptage XOR sur tous les fichiers .srt du dossier s√©lectionn√©.\n"
                 "Utilisez cette option seulement si vous savez que vos fichiers sont crypt√©s.",
            font=('Arial', 9),
            foreground='gray',
            justify=tk.LEFT
        )
        description.pack(pady=(0, 15), anchor=tk.W)
        
        # Section options
        options_frame = ttk.LabelFrame(main_frame, text="Options de d√©cryptage", padding="10")
        options_frame.pack(fill=tk.X, pady=(0, 15))
        
        # Variables
        self.xor_key_var = tk.StringVar(value="0xAA")
        self.force_decrypt_var = tk.BooleanVar(value=True)
        
        # Cl√© XOR
        key_frame = ttk.Frame(options_frame)
        key_frame.pack(fill=tk.X, pady=5)
        ttk.Label(key_frame, text="Cl√© XOR:", width=15).pack(side=tk.LEFT)
        key_entry = ttk.Entry(key_frame, textvariable=self.xor_key_var, width=10)
        key_entry.pack(side=tk.LEFT, padx=(5, 10))
        ttk.Label(key_frame, text="(hex: 0xAA ou d√©cimal: 170)", foreground='gray').pack(side=tk.LEFT)
        
        # Option forcer
        ttk.Checkbutton(
            options_frame, 
            text="Forcer le d√©cryptage (ignorer la d√©tection automatique)",
            variable=self.force_decrypt_var
        ).pack(anchor=tk.W, pady=5)
        
        # Zone de progression
        progress_frame = ttk.LabelFrame(main_frame, text="Progression", padding="10")
        progress_frame.pack(fill=tk.X, pady=(0, 15))
        
        self.xor_progress_var = tk.DoubleVar()
        self.xor_progress_bar = ttk.Progressbar(
            progress_frame, 
            variable=self.xor_progress_var, 
            maximum=100
        )
        self.xor_progress_bar.pack(fill=tk.X, pady=(0, 5))
        
        self.xor_status_label = ttk.Label(progress_frame, text="Pr√™t √† d√©marrer")
        self.xor_status_label.pack(anchor=tk.W)
        
        # Boutons
        button_frame = ttk.Frame(main_frame)
        button_frame.pack(fill=tk.X, pady=(15, 0))
        
        ttk.Button(
            button_frame,
            text="üîì D√©marrer le d√©cryptage",
            command=lambda: self.execute_manual_xor_decrypt(xor_window),
            style='Action.TButton'
        ).pack(side=tk.LEFT, padx=(0, 10))
        
        ttk.Button(
            button_frame,
            text="‚ùå Annuler",
            command=xor_window.destroy
        ).pack(side=tk.RIGHT)

    def execute_manual_xor_decrypt(self, window):
        """Ex√©cute le d√©cryptage XOR manuel"""
        try:
            # Parser la cl√© XOR
            key_str = self.xor_key_var.get().strip()
            if key_str.startswith('0x') or key_str.startswith('0X'):
                xor_key = int(key_str, 16)
            else:
                xor_key = int(key_str)
            
            if not (0 <= xor_key <= 255):
                raise ValueError("Cl√© doit √™tre entre 0 et 255")
                
        except ValueError as e:
            messagebox.showerror("Erreur", f"Cl√© XOR invalide: {e}")
            return
        
        force_decrypt = self.force_decrypt_var.get()
        
        def decrypt_thread():
            try:
                from xor_decoder import xor_decoder
                from pathlib import Path
                import os
                
                game_path = Path(self.game_path.get())
                srt_files = []
                
                # Trouver tous les fichiers .srt
                for root, dirs, files in os.walk(game_path):
                    for file in files:
                        if file.lower().endswith('.srt'):
                            srt_files.append(Path(root) / file)
                
                if not srt_files:
                    self.root.after(0, lambda: messagebox.showinfo("Info", "Aucun fichier .srt trouv√©"))
                    return
                
                total_files = len(srt_files)
                decrypted_count = 0
                
                self.root.after(0, lambda: self.xor_status_label.config(text=f"Traitement de {total_files} fichiers..."))
                
                for i, srt_file in enumerate(srt_files):
                    progress = (i + 1) / total_files * 100
                    self.root.after(0, lambda p=progress: self.xor_progress_var.set(p))
                    self.root.after(0, lambda f=srt_file.name: self.xor_status_label.config(text=f"D√©cryptage: {f}"))
                    
                    # V√©rifier si le fichier doit √™tre d√©crypt√©
                    should_decrypt = force_decrypt or xor_decoder.is_likely_obfuscated(srt_file)
                    
                    if should_decrypt:
                        # D√©crypter le fichier
                        decoded_data = xor_decoder.decode_file(srt_file, xor_key)
                        if decoded_data:
                            # Sauvegarder le fichier d√©crypt√©
                            temp_file = xor_decoder.save_decoded_temp(srt_file, decoded_data, xor_key)
                            if temp_file:
                                decrypted_count += 1
                
                self.root.after(0, lambda: self.xor_status_label.config(text=f"Termin√©: {decrypted_count}/{total_files} fichiers d√©crypt√©s"))
                self.root.after(0, lambda: messagebox.showinfo(
                    "D√©cryptage termin√©", 
                    f"D√©cryptage termin√©!\n"
                    f"Fichiers trait√©s: {total_files}\n"
                    f"Fichiers d√©crypt√©s: {decrypted_count}\n"
                    f"Cl√© utilis√©e: 0x{xor_key:02X} ({xor_key})\n\n"
                    f"Les fichiers d√©crypt√©s sont sauv√©s dans le dossier 'decoded_temp'."
                ))
                
            except Exception as e:
                self.root.after(0, lambda: messagebox.showerror("Erreur", f"Erreur lors du d√©cryptage: {e}"))
        
        # Lancer le d√©cryptage dans un thread s√©par√©
        import threading
        thread = threading.Thread(target=decrypt_thread, daemon=True)
        thread.start()

    def stop_current_injection(self):
        """Arr√™te l'injection en cours"""
        if hasattr(self, 'injection_stop_flag'):
            self.injection_stop_flag = True
            self.log("‚èπÔ∏è Arr√™t de l'injection demand√© par l'utilisateur")

    def clear_cache(self):
        """Vide le cache de traductions"""
        try:
            # Vider le cache du traducteur intelligent
            if self.intelligent_translator:
                self.intelligent_translator.clear_cache()
            
            # Supprimer les fichiers de cache
            cache_files = [
                "translation_cache.json",
                "intelligent_context_cache.json",
                "intelligent_translations_cache.txt"
            ]
            
            removed_files = []
            for cache_file in cache_files:
                if os.path.exists(cache_file):
                    os.remove(cache_file)
                    removed_files.append(cache_file)
            
            cache_info = "Cache effac√© avec succ√®s."
            if removed_files:
                cache_info += f"\nFichiers supprim√©s: {', '.join(removed_files)}"
            
            messagebox.showinfo("Cache", cache_info)
            print("üßπ Cache vid√© (basique + intelligent)")
            
        except Exception as e:
            messagebox.showerror("Erreur", f"Impossible d'effacer le cache: {e}")

    # --- Les m√©thodes existantes avec corrections ---
    
    def start_scan(self):
        """D√©marre le processus de scan dans un thread s√©par√©"""
        if not self.game_path.get():
            messagebox.showerror("Erreur", "Veuillez s√©lectionner un dossier")
            return
            
        if not os.path.exists(self.game_path.get()):
            messagebox.showerror("Erreur", "Le dossier s√©lectionn√© n'existe pas")
            return
            
        if self.scanning:
            return
            
        if UnityTextScanner is None:
            messagebox.showerror("Erreur", "Module UnityTextScanner non disponible")
            return
        
        self.scanning = True
        self.scan_button.config(state="disabled", text="‚è≥ Scan en cours...")
        self.stop_scan_button.pack(side=tk.LEFT, padx=(10, 0))
        
        self.log_text.delete(1.0, tk.END)
        self.progress_var.set(0)
        self.update_status_indicator("Scan en cours", 'blue')
        
        # D√©marrer le scan dans un thread
        thread = threading.Thread(target=self.run_scan)
        thread.daemon = True
        thread.start()

    def run_scan(self):
        """Ex√©cute le scan"""
        try:
            print("üöÄ D√©marrage du scan...")
            scanner = UnityTextScanner(self.game_path.get(), self.update_progress)
            
            # Configuration du scanner selon les options
            scanner.scan_textassets = self.scan_textassets.get()
            scanner.scan_monobehaviours = self.scan_monobehaviours.get()
            scanner.scan_textfiles = self.scan_textfiles.get()
            scanner.deep_scan = self.deep_scan.get()
            
            scanner.scan_directory()
            
            self.current_texts = {
                'game_path': self.game_path.get(),
                'scan_date': datetime.now().isoformat(),
                'total_texts': len(scanner.found_texts),
                'texts': scanner.found_texts,
                'scan_options': {
                    'textassets': self.scan_textassets.get(),
                    'monobehaviours': self.scan_monobehaviours.get(),
                    'textfiles': self.scan_textfiles.get(),
                    'deep_scan': self.deep_scan.get()
                }
            }
            
            # Sauvegarder le scan
            self.save_scan_results()
            
            # Mettre √† jour l'interface dans le thread principal
            self.root.after(0, self.scan_completed)
            
        except Exception as e:
            error_message = str(e)
            print(f"‚ùå Erreur durant le scan: {error_message}")
            self.root.after(0, lambda: self.scan_error(error_message))

    def scan_completed(self):
        """Appel√© quand le scan est termin√©"""
        self.scanning = False
        self.scan_button.config(state="normal", text="üöÄ D√©marrer le scan")
        self.stop_scan_button.pack_forget()
        
        total_texts = self.current_texts['total_texts']
        self.update_progress(100, f"‚úÖ Scan termin√©! {total_texts} textes trouv√©s")
        self.update_status_indicator("Scan termin√©", 'green')
        
        # Activer les autres onglets
        self.notebook.tab(1, state="normal")  # √âditeur
        self.notebook.tab(2, state="normal")  # Injection
        
        # Passer √† l'onglet √©diteur
        self.notebook.select(1)
        
        # Mettre √† jour l'interface
        self.update_text_list()
        self.update_stats()
        
        messagebox.showinfo(
            "Scan termin√©",
            f"Scan termin√© avec succ√®s!\n"
            f"Textes trouv√©s: {total_texts}\n"
            f"Fichier de scan sauv√©: scan_results.json"
        )
        
        print(f"‚úÖ Scan termin√©: {total_texts} textes trouv√©s")

    def scan_error(self, error_msg: str):
        """Appel√© en cas d'erreur durant le scan"""
        self.scanning = False
        self.scan_button.config(state="normal", text="üöÄ D√©marrer le scan")
        self.stop_scan_button.pack_forget()
        
        self.update_progress(0, "‚ùå Erreur durant le scan")
        self.update_status_indicator("Erreur de scan", 'red')
        
        messagebox.showerror("Erreur de scan", f"Erreur durant le scan:\n{error_msg}")

    def update_progress(self, value: float, status: str):
        """Met √† jour la barre de progression de mani√®re thread-safe"""
        self.root.after(0, lambda: self._update_progress_ui(value, status))

    def _update_progress_ui(self, value: float, status: str):
        """Met √† jour l'interface de progression"""
        self.progress_var.set(value)
        self.status_label.config(text=status)

    def update_text_list(self):
        """Met √† jour la liste des textes dans le TreeView"""
        # Vider la liste
        for item in self.text_tree.get_children():
            self.text_tree.delete(item)
        
        if not self.current_texts:
            return
        
        # Ajouter les textes
        for text_entry in self.current_texts['texts']:
            self.add_text_to_tree(text_entry)

    def update_stats(self):
        """Met √† jour les statistiques"""
        if not self.current_texts:
            self.stats_label.config(text="Aucun texte charg√©")
            self.translation_progress.config(value=0)
            return
        
        total = self.current_texts['total_texts']
        translated = len([t for t in self.current_texts['texts'] if t.get('is_translated', False)])
        
        percentage = (translated / total * 100) if total > 0 else 0
        
        stats_text = (
            f"üìä Total: {total} textes | "
            f"‚úÖ Traduits: {translated} ({percentage:.1f}%) | "
            f"üìù Restants: {total - translated}"
        )
        
        self.stats_label.config(text=stats_text)
        self.translation_progress.config(value=percentage)
        
        # Mettre √† jour les statistiques d'injection
        if hasattr(self, 'injection_stats'):
            injection_text = (
                f"üìã Pr√™t √† injecter {translated} traductions dans {total} textes trouv√©s"
            )
            self.injection_stats.config(text=injection_text)

    def show_text_editor(self, text_entry: Dict):
        """Affiche l'√©diteur de texte pour un √©l√©ment"""
        editor_window = tk.Toplevel(self.root)
        editor_window.title(f"‚úèÔ∏è √âditeur - {text_entry.get('asset_name', 'Texte')}")
        editor_window.geometry("900x700")
        editor_window.transient(self.root)
        editor_window.grab_set()
        
        # Configuration de l'ic√¥ne
        try:
            editor_window.iconbitmap(default='icon.ico')
        except:
            pass
        
        # Frame principal avec padding
        main_frame = ttk.Frame(editor_window, padding="15")
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # En-t√™te avec informations
        info_section = ttk.LabelFrame(main_frame, text="üìã Informations", padding="10")
        info_section.pack(fill=tk.X, pady=(0, 15))
        
        info_grid = ttk.Frame(info_section)
        info_grid.pack(fill=tk.X)
        
        info_data = [
            ("ID:", text_entry.get('id', 'N/A')),
            ("Fichier:", Path(text_entry.get('source_file', '')).name),
            ("Asset:", text_entry.get('asset_name', 'N/A')),
            ("Type:", text_entry.get('asset_type', 'N/A')),
            ("Longueur:", f"{len(text_entry.get('original_text', ''))} caract√®res")
        ]
        
        for i, (label, value) in enumerate(info_data):
            ttk.Label(info_grid, text=label, font=('Arial', 9, 'bold')).grid(
                row=i//2, column=(i%2)*2, sticky='e', padx=(0, 5), pady=2
            )
            ttk.Label(info_grid, text=value).grid(
                row=i//2, column=(i%2)*2+1, sticky='w', padx=(0, 20), pady=2
            )
        
        # Section texte original
        original_section = ttk.LabelFrame(main_frame, text="üìÑ Texte original", padding="10")
        original_section.pack(fill=tk.BOTH, expand=True, pady=(0, 15))
        
        original_frame = ttk.Frame(original_section)
        original_frame.pack(fill=tk.BOTH, expand=True)
        
        original_text = scrolledtext.ScrolledText(
            original_frame,
            height=8,
            wrap=tk.WORD,
            state=tk.DISABLED,
            font=('Arial', 10)
        )
        original_text.pack(fill=tk.BOTH, expand=True)
        
        original_text.config(state=tk.NORMAL)
        original_text.insert(tk.END, text_entry.get('original_text', ''))
        original_text.config(state=tk.DISABLED)
        
        # Section texte traduit
        translated_section = ttk.LabelFrame(main_frame, text="üåê Texte traduit", padding="10")
        translated_section.pack(fill=tk.BOTH, expand=True, pady=(0, 15))
        
        translated_frame = ttk.Frame(translated_section)
        translated_frame.pack(fill=tk.BOTH, expand=True)
        
        translated_text = scrolledtext.ScrolledText(
            translated_frame,
            height=8,
            wrap=tk.WORD,
            font=('Arial', 10)
        )
        translated_text.pack(fill=tk.BOTH, expand=True)
        translated_text.insert(tk.END, text_entry.get('translated_text', ''))
        
        # Section boutons
        button_section = ttk.Frame(main_frame)
        button_section.pack(fill=tk.X)
        
        # Fonctions des boutons
        def save_translation():
            new_text = translated_text.get(1.0, tk.END).strip()
            text_entry['translated_text'] = new_text
            text_entry['is_translated'] = new_text != text_entry.get('original_text', '')
            
            self.update_text_list()
            self.update_stats()
            
            if self.auto_save_var.get():
                self.save_current_texts()
            
            editor_window.destroy()
            messagebox.showinfo("Sauvegard√©", "Traduction sauvegard√©e avec succ√®s!")
        
        def reset_translation():
            translated_text.delete(1.0, tk.END)
            translated_text.insert(tk.END, text_entry.get('original_text', ''))
        
        def auto_translate_this():
            if not (OPENAI_AVAILABLE or INTELLIGENT_TRANSLATOR_AVAILABLE):
                messagebox.showerror("Erreur", "Traducteur non disponible")
                return
            
            editor_window.destroy()
            if INTELLIGENT_TRANSLATOR_AVAILABLE:
                self.translate_single_resource_intelligent(text_entry)
            else:
                self.translate_single_resource(text_entry)
        
        # Boutons de gauche
        left_buttons = ttk.Frame(button_section)
        left_buttons.pack(side=tk.LEFT)
        
        ttk.Button(
            left_buttons,
            text="üíæ Sauvegarder",
            command=save_translation,
            style='Success.TButton'
        ).pack(side=tk.LEFT, padx=(0, 10))
        
        ttk.Button(
            left_buttons,
            text="üîÑ R√©initialiser",
            command=reset_translation
        ).pack(side=tk.LEFT, padx=(0, 10))
        
        # Bouton de traduction automatique
        if INTELLIGENT_TRANSLATOR_AVAILABLE:
            ttk.Button(
                left_buttons,
                text="üß† Traduire intelligemment",
                command=auto_translate_this,
                style='Action.TButton'
            ).pack(side=tk.LEFT)
        elif OPENAI_AVAILABLE:
            ttk.Button(
                left_buttons,
                text="ü§ñ Traduire automatiquement",
                command=auto_translate_this,
                style='Action.TButton'
            ).pack(side=tk.LEFT)
        
        # Bouton de fermeture
        ttk.Button(
            button_section,
            text="‚ùå Fermer",
            command=editor_window.destroy
        ).pack(side=tk.RIGHT)

    def setup_intelligent_translation(self):
        """Configure le syst√®me de traduction intelligente"""
        if not INTELLIGENT_TRANSLATOR_AVAILABLE:
            messagebox.showerror(
                "Traducteur intelligent non disponible",
                "Le module de traduction intelligente n'est pas disponible.\n"
                "V√©rifiez que le fichier intelligent_translator_adapter.py est pr√©sent."
            )
            return
        
        if not self.current_texts:
            messagebox.showerror("Erreur", "Aucun texte √† traduire. Effectuez d'abord un scan.")
            return
        
        # V√©rifier si l'utilisateur pr√©f√®re le traducteur basique
        use_basic = getattr(self, 'use_basic_translator_var', None)
        if use_basic and use_basic.get():
            self.setup_auto_translation()
            return
        
        # Initialiser le traducteur intelligent
        if not self.intelligent_translator:
            self.intelligent_translator = IntelligentTranslatorAdapter()
            
            if not self.intelligent_translator.is_available():
                messagebox.showerror(
                    "Configuration requise",
                    "Impossible d'initialiser le traducteur intelligent.\n"
                    "V√©rifiez votre cl√© API OpenAI."
                )
                return
        
        # Charger le cache intelligent
        self.intelligent_translator.load_context_cache()
        print("‚úÖ Traducteur intelligent initialis√©")
        
        # Compter les textes non traduits
        untranslated_count = len([
            t for t in self.current_texts['texts'] 
            if not t.get('is_translated', False)
        ])
        
        if untranslated_count == 0:
            messagebox.showinfo("Information", "‚úÖ Tous les textes sont d√©j√† traduits")
            return
        
        # Demander confirmation avec informations sur l'analyse intelligente
        result = messagebox.askyesno(
            "Traduction intelligente",
            f"üß† Traduction intelligente avec analyse contextuelle\n\n"
            f"Cette fonctionnalit√© va:\n"
            f"‚Ä¢ Analyser le contexte global de votre jeu\n"
            f"‚Ä¢ Identifier les personnages et le style\n"
            f"‚Ä¢ Traduire {untranslated_count} textes avec coh√©rence\n"
            f"‚Ä¢ Valider automatiquement les traductions\n\n"
            f"‚ö†Ô∏è Premi√®re utilisation: analyse plus longue\n"
            f"üí∞ Utilise l'API OpenAI\n\n"
            f"Voulez-vous continuer ?"
        )
        
        if result:
            self.start_intelligent_translation()
    
    def setup_auto_translation(self):
        """Configure le syst√®me de traduction automatique (basique)"""
        if not OPENAI_AVAILABLE:
            messagebox.showerror(
                "OpenAI non disponible",
                "Le module OpenAI n'est pas install√©.\n"
                "Installez-le avec: pip install openai langdetect"
            )
            return
        
        if not self.current_texts:
            messagebox.showerror("Erreur", "Aucun texte √† traduire. Effectuez d'abord un scan.")
            return
        
        # Rediriger vers le traducteur intelligent
        self.setup_intelligent_translation()
        return
        
        # Compter les textes non traduits
        untranslated_count = len([
            t for t in self.current_texts['texts'] 
            if not t.get('is_translated', False)
        ])
        
        if untranslated_count == 0:
            messagebox.showinfo("Information", "‚úÖ Tous les textes sont d√©j√† traduits")
            return
        
        # Demander confirmation
        result = messagebox.askyesno(
            "Traduction automatique",
            f"Voulez-vous traduire automatiquement les {untranslated_count} textes non traduits?\n\n"
            f"‚ö†Ô∏è Cette op√©ration utilisera l'API OpenAI et peut prendre du temps.\n"
            f"üí∞ Des frais peuvent s'appliquer selon votre plan OpenAI."
        )
        
        if result:
            self.start_auto_translation()

    def start_intelligent_translation(self):
        """D√©marre la traduction intelligente"""
        if not self.current_texts or self.translating:
            return
        
        # Pr√©parer la liste des textes √† traduire
        texts_to_translate = [
            t for t in self.current_texts['texts'] 
            if not t.get('is_translated', False)
        ]
        
        if not texts_to_translate:
            messagebox.showinfo("Information", "Tous les textes sont d√©j√† traduits")
            return
        
        self.translating = True
        self.stop_translation = False
        self.auto_translate_button.config(state="disabled", text="‚è≥ Analyse et traduction...")
        self.update_status_indicator("Traduction intelligente en cours", 'blue')
        
        # Cr√©er une fen√™tre de progression intelligente
        self.create_intelligent_translation_window(len(texts_to_translate))
        
        # D√©marrer la traduction intelligente dans un thread
        thread = threading.Thread(target=self.run_intelligent_translation, args=(texts_to_translate,))
        thread.daemon = True
        thread.start()
    
    def start_auto_translation(self):
        """D√©marre la traduction automatique basique"""
        if not self.current_texts or self.translating:
            return
        
        # Pr√©parer la liste des textes √† traduire
        texts_to_translate = [
            t for t in self.current_texts['texts'] 
            if not t.get('is_translated', False)
        ]
        
        if not texts_to_translate:
            messagebox.showinfo("Information", "Tous les textes sont d√©j√† traduits")
            return
        
        self.translating = True
        self.stop_translation = False
        self.auto_translate_button.config(state="disabled", text="‚è≥ Traduction en cours...")
        self.update_status_indicator("Traduction en cours", 'blue')
        
        # Cr√©er une fen√™tre de progression
        self.create_translation_progress_window(len(texts_to_translate))
        
        # D√©marrer la traduction dans un thread
        thread = threading.Thread(target=self.run_auto_translation, args=(texts_to_translate,))
        thread.daemon = True
        thread.start()

    def create_translation_progress_window(self, total_texts: int):
        """Cr√©e une fen√™tre de progression pour la traduction automatique"""
        self.progress_window = tk.Toplevel(self.root)
        self.progress_window.title("ü§ñ Traduction automatique")
        self.progress_window.geometry("500x200")
        self.progress_window.transient(self.root)
        self.progress_window.grab_set()
        
        # Emp√™cher la fermeture par X
        self.progress_window.protocol("WM_DELETE_WINDOW", self.stop_auto_translation)
        
        progress_frame = ttk.Frame(self.progress_window, padding="20")
        progress_frame.pack(fill=tk.BOTH, expand=True)
        
        # Titre
        title_label = ttk.Label(
            progress_frame,
            text=f"ü§ñ Traduction de {total_texts} textes en cours...",
            font=('Arial', 12, 'bold')
        )
        title_label.pack(pady=(0, 15))
        
        # Barre de progression
        self.translation_progress_var = tk.DoubleVar(value=0)
        self.translation_progress_bar = ttk.Progressbar(
            progress_frame,
            variable=self.translation_progress_var,
            maximum=100,
            length=400
        )
        self.translation_progress_bar.pack(fill=tk.X, pady=(0, 10))
        
        # Label de statut
        self.translation_status_label = ttk.Label(
            progress_frame,
            text=f"0/{total_texts} ‚Äì Initialisation‚Ä¶"
        )
        self.translation_status_label.pack(pady=(0, 15))
        
        # Boutons de contr√¥le
        button_frame = ttk.Frame(progress_frame)
        button_frame.pack(fill=tk.X)
        
        self.stop_button = ttk.Button(
            button_frame,
            text="‚èπÔ∏è Arr√™ter",
            command=self.stop_auto_translation,
            style='Danger.TButton'
        )
        self.stop_button.pack(side=tk.LEFT)
        
        # Informations suppl√©mentaires
        info_label = ttk.Label(
            button_frame,
            text="üí° Vous pouvez fermer cette fen√™tre pour arr√™ter",
            font=('Arial', 8),
            foreground='gray'
        )
        info_label.pack(side=tk.RIGHT)

    def create_intelligent_translation_window(self, total_texts: int):
        """Cr√©e une fen√™tre de progression pour la traduction intelligente"""
        self.progress_window = tk.Toplevel(self.root)
        self.progress_window.title("üß† Traduction Intelligente")
        self.progress_window.geometry("600x300")
        self.progress_window.transient(self.root)
        self.progress_window.grab_set()
        
        # Emp√™cher la fermeture par X
        self.progress_window.protocol("WM_DELETE_WINDOW", self.stop_auto_translation)
        
        progress_frame = ttk.Frame(self.progress_window, padding="20")
        progress_frame.pack(fill=tk.BOTH, expand=True)
        
        # Titre
        title_label = ttk.Label(
            progress_frame,
            text=f"üß† Traduction intelligente de {total_texts} textes",
            font=('Arial', 12, 'bold')
        )
        title_label.pack(pady=(0, 10))
        
        # Sous-titre explicatif
        subtitle_label = ttk.Label(
            progress_frame,
            text="Analyse contextuelle globale puis traduction coh√©rente",
            font=('Arial', 10),
            foreground='gray'
        )
        subtitle_label.pack(pady=(0, 15))
        
        # Barre de progression
        self.translation_progress_var = tk.DoubleVar(value=0)
        self.translation_progress_bar = ttk.Progressbar(
            progress_frame,
            variable=self.translation_progress_var,
            maximum=100,
            length=500
        )
        self.translation_progress_bar.pack(fill=tk.X, pady=(0, 10))
        
        # Label de statut
        self.translation_status_label = ttk.Label(
            progress_frame,
            text="üîç Phase 1: Analyse du contexte global en cours..."
        )
        self.translation_status_label.pack(pady=(0, 15))
        
        # Zone d'informations d'analyse
        info_frame = ttk.LabelFrame(progress_frame, text="üìä Informations d'analyse", padding="10")
        info_frame.pack(fill=tk.X, pady=(0, 15))
        
        self.analysis_info_label = ttk.Label(
            info_frame,
            text="En attente de l'analyse...",
            font=('Arial', 9)
        )
        self.analysis_info_label.pack(anchor=tk.W)
        
        # Boutons de contr√¥le
        button_frame = ttk.Frame(progress_frame)
        button_frame.pack(fill=tk.X)
        
        self.stop_button = ttk.Button(
            button_frame,
            text="‚èπÔ∏è Arr√™ter",
            command=self.stop_auto_translation,
            style='Danger.TButton'
        )
        self.stop_button.pack(side=tk.LEFT)
        
        # Informations suppl√©mentaires
        info_label = ttk.Label(
            button_frame,
            text="üí° Premi√®re analyse plus longue, puis traduction acc√©l√©r√©e",
            font=('Arial', 8),
            foreground='gray'
        )
        info_label.pack(side=tk.RIGHT)

    def stop_auto_translation(self):
        """Arr√™te la traduction automatique"""
        self.stop_translation = True
        if hasattr(self, 'translation_status_label'):
            self.translation_status_label.config(text="‚èπÔ∏è Arr√™t demand√©...")
        if hasattr(self, 'stop_button'):
            self.stop_button.config(state='disabled')

    def run_auto_translation(self, texts_to_translate: List[Dict]):
        """Ex√©cute la traduction automatique dans un thread s√©par√©"""
        translated_count = 0
        
        try:
            print(f"üöÄ D√©but de la traduction de {len(texts_to_translate)} textes")
            
            def update_translation_progress(value: float, status: str):
                if hasattr(self, 'translation_progress_var') and hasattr(self, 'translation_status_label'):
                    self.root.after(0, lambda: self.translation_progress_var.set(value))
                    self.root.after(0, lambda: self.translation_status_label.config(text=status))
            
            def should_stop():
                return getattr(self, 'stop_translation', False)
            
            # Traduire les textes
            translated_count = self.translator.batch_translate(
                texts_to_translate,
                progress_callback=update_translation_progress,
                should_stop=should_stop
            )
            
            # Sauvegarder le cache
            self.translator.save_cache()
            
            # Mettre √† jour l'interface principale
            self.root.after(0, self.update_text_list)
            self.root.after(0, self.update_stats)
            
            # Auto-sauvegarder si activ√©
            if hasattr(self, 'auto_save_var') and self.auto_save_var.get():
                self.root.after(0, self.save_current_texts)
            
        except Exception as e:
            print(f"‚ùå Erreur durant la traduction: {e}")
            error_message = str(e)
            self.root.after(0, lambda: messagebox.showerror(
                "Erreur de traduction", 
                f"Erreur durant la traduction:\n{error_message}"
            ))
        
        finally:
            # Nettoyer et fermer
            self.translating = False
            self.stop_translation = False
            
            if hasattr(self, 'progress_window'):
                self.root.after(0, self.progress_window.destroy)
            
            self.root.after(0, lambda: self.auto_translate_button.config(
                state="normal", 
                text="ü§ñ Traduction auto"
            ))
            
            self.root.after(0, lambda: self.update_status_indicator("Traduction termin√©e", 'green'))
            
            # Message de fin
            if should_stop():
                self.root.after(0, lambda: messagebox.showinfo(
                    "Traduction interrompue",
                    f"‚èπÔ∏è Traduction interrompue par l'utilisateur.\n"
                    f"Textes traduits avant l'arr√™t: {translated_count}"
                ))
            else:
                self.root.after(0, lambda: messagebox.showinfo(
                    "Traduction termin√©e",
                    f"‚úÖ Traduction automatique termin√©e!\n"
                    f"Textes traduits: {translated_count}\n"
                    f"Cache sauvegard√© automatiquement."
                ))

    def run_intelligent_translation(self, texts_to_translate: List[Dict]):
        """Ex√©cute la traduction intelligente dans un thread s√©par√©"""
        translated_count = 0
        
        try:
            print(f"üß† D√©but de la traduction intelligente de {len(texts_to_translate)} textes")
            
            def update_translation_progress(value: float, status: str):
                if hasattr(self, 'translation_progress_var') and hasattr(self, 'translation_status_label'):
                    self.root.after(0, lambda: self.translation_progress_var.set(value))
                    self.root.after(0, lambda: self.translation_status_label.config(text=status))
            
            def update_analysis_info(info: str):
                if hasattr(self, 'analysis_info_label'):
                    self.root.after(0, lambda: self.analysis_info_label.config(text=info))
            
            def should_stop():
                return getattr(self, 'stop_translation', False)
            
            # Phase 1: Analyse du contexte si pas encore fait
            if not self.intelligent_translator.context_analyzed:
                update_translation_progress(5, "üîç Phase 1: Analyse globale du contexte...")
                context = self.intelligent_translator.analyze_global_context(self.current_texts['texts'])
                
                # Mettre √† jour les informations d'analyse
                stats = self.intelligent_translator.get_stats()
                analysis_text = (
                    f"‚Ä¢ Type de jeu: {stats.get('game_type', 'Analys√©')}\n"
                    f"‚Ä¢ Personnages d√©tect√©s: {stats.get('characters_found', 0)}\n"
                    f"‚Ä¢ Cache intelligent: {stats.get('cache_size', 0)} traductions"
                )
                update_analysis_info(analysis_text)
            
            # Phase 2: Traduction avec contexte
            update_translation_progress(10, "üé¨ Phase 2: Traduction par s√©quences en cours...")
            
            # Traduire les textes avec le traducteur intelligent
            translated_count = self.intelligent_translator.batch_translate_sequences(
                texts_to_translate,
                progress_callback=lambda p, s: update_translation_progress(10 + (p * 0.85), f"üé¨ {s}"),
                should_stop=should_stop
            )
            
            # Sauvegarder le cache intelligent
            self.intelligent_translator.save_context_cache()
            
            # Mettre √† jour l'interface principale
            self.root.after(0, self.update_text_list)
            self.root.after(0, self.update_stats)
            
            # Auto-sauvegarder si activ√©
            if hasattr(self, 'auto_save_var') and self.auto_save_var.get():
                self.root.after(0, self.save_current_texts)
            
        except Exception as e:
            print(f"‚ùå Erreur durant la traduction intelligente: {e}")
            error_message = str(e)
            self.root.after(0, lambda: messagebox.showerror(
                "Erreur de traduction", 
                f"Erreur durant la traduction intelligente:\n{error_message}"
            ))
        
        finally:
            # Nettoyer et fermer
            self.translating = False
            self.stop_translation = False
            
            if hasattr(self, 'progress_window'):
                self.root.after(0, self.progress_window.destroy)
            
            self.root.after(0, lambda: self.auto_translate_button.config(
                state="normal", 
                text="üß† Traduction intelligente"
            ))
            
            self.root.after(0, lambda: self.update_status_indicator("Traduction intelligente termin√©e", 'green'))
            
            # Message de fin
            if should_stop():
                self.root.after(0, lambda: messagebox.showinfo(
                    "Traduction interrompue",
                    f"‚èπÔ∏è Traduction intelligente interrompue.\n"
                    f"Textes traduits avant l'arr√™t: {translated_count}"
                ))
            else:
                # Obtenir les statistiques finales
                stats = self.intelligent_translator.get_stats()
                self.root.after(0, lambda: messagebox.showinfo(
                    "Traduction intelligente termin√©e",
                    f"‚úÖ Traduction intelligente termin√©e!\n\n"
                    f"üìä Textes traduits: {translated_count}\n"
                    f"üß† Personnages analys√©s: {stats.get('characters_found', 0)}\n"
                    f"üíæ Cache intelligent: {stats.get('cache_size', 0)} traductions\n\n"
                    f"Le contexte global a √©t√© sauvegard√© pour les prochaines sessions."
                ))

    def translate_single_resource(self, text_entry: Dict):
        """Traduit une ressource sp√©cifique - redirection vers traducteur intelligent"""
        # Rediriger vers le traducteur intelligent
        self.translate_single_resource_intelligent(text_entry)
        return
        
        # Cr√©er une fen√™tre de progression simple
        progress_window = tk.Toplevel(self.root)
        progress_window.title("ü§ñ Traduction")
        progress_window.geometry("400x150")
        progress_window.transient(self.root)
        progress_window.grab_set()
        
        progress_frame = ttk.Frame(progress_window, padding="20")
        progress_frame.pack(fill=tk.BOTH, expand=True)
        
        ttk.Label(
            progress_frame,
            text="ü§ñ Traduction en cours...",
            font=('Arial', 11, 'bold')
        ).pack(pady=(0, 15))
        
        progress_bar = ttk.Progressbar(
            progress_frame,
            mode="indeterminate",
            length=300
        )
        progress_bar.pack(fill=tk.X, pady=(0, 10))
        progress_bar.start()
        
        status_label = ttk.Label(progress_frame, text="Initialisation...")
        status_label.pack()
        
        def translate_worker():
            try:
                status_label.config(text="Analyse du contexte...")
                context = self.translator.get_default_context()
                
                status_label.config(text="Traduction en cours...")
                original_text = text_entry.get('original_text', '')
                translated_text = self.translator.translate_text(original_text, context)
                
                status_label.config(text="Finalisation...")
                
                if translated_text != original_text:
                    text_entry['translated_text'] = translated_text
                    text_entry['is_translated'] = True
                    
                    # Sauvegarder le cache
                    self.translator.save_cache()
                    
                    # Mettre √† jour l'interface
                    self.root.after(100, self.update_text_list)
                    self.root.after(100, self.update_stats)
                    
                    progress_window.after(500, progress_window.destroy)
                    messagebox.showinfo("Succ√®s", "‚úÖ Texte traduit avec succ√®s!")
                else:
                    progress_window.destroy()
                    messagebox.showinfo("Information", "‚ÑπÔ∏è Le texte semble d√©j√† √™tre en fran√ßais")
                    
            except Exception as e:
                progress_window.destroy()
                error_message = str(e)
                messagebox.showerror("Erreur", f"Erreur lors de la traduction:\n{error_message}")
        
        # Lancer la traduction dans un thread
        thread = threading.Thread(target=translate_worker)
        thread.daemon = True
        thread.start()

    def translate_single_resource_intelligent(self, text_entry: Dict):
        """Traduit une ressource sp√©cifique avec le traducteur intelligent"""
        if not INTELLIGENT_TRANSLATOR_AVAILABLE or not self.intelligent_translator:
            messagebox.showerror("Erreur", "Traducteur intelligent non disponible")
            return
        
        # Cr√©er une fen√™tre de progression simple
        progress_window = tk.Toplevel(self.root)
        progress_window.title("üß† Traduction Intelligente")
        progress_window.geometry("450x200")
        progress_window.transient(self.root)
        progress_window.grab_set()
        
        progress_frame = ttk.Frame(progress_window, padding="20")
        progress_frame.pack(fill=tk.BOTH, expand=True)
        
        ttk.Label(
            progress_frame,
            text="üß† Traduction intelligente en cours...",
            font=('Arial', 11, 'bold')
        ).pack(pady=(0, 10))
        
        ttk.Label(
            progress_frame,
            text="Analyse contextuelle et traduction coh√©rente",
            font=('Arial', 9),
            foreground='gray'
        ).pack(pady=(0, 15))
        
        progress_bar = ttk.Progressbar(
            progress_frame,
            mode="indeterminate",
            length=350
        )
        progress_bar.pack(fill=tk.X, pady=(0, 10))
        progress_bar.start()
        
        status_label = ttk.Label(progress_frame, text="Initialisation...")
        status_label.pack()
        
        def translate_worker():
            try:
                # Analyser le contexte si pas encore fait
                if not self.intelligent_translator.context_analyzed:
                    status_label.config(text="Analyse du contexte global...")
                    self.intelligent_translator.analyze_global_context(self.current_texts['texts'])
                
                status_label.config(text="Traduction intelligente...")
                original_text = text_entry.get('original_text', '')
                file_context = f"{text_entry.get('asset_type', 'Unity')} - {text_entry.get('asset_name', 'Asset')}"
                
                translated_text = self.intelligent_translator.translate_with_context(
                    original_text, 
                    self.intelligent_translator.global_context,
                    file_context
                )
                
                status_label.config(text="Finalisation...")
                
                if translated_text != original_text:
                    text_entry['translated_text'] = translated_text
                    text_entry['is_translated'] = True
                    
                    # Sauvegarder le cache intelligent
                    self.intelligent_translator.save_context_cache()
                    
                    # Mettre √† jour l'interface
                    self.root.after(100, self.update_text_list)
                    self.root.after(100, self.update_stats)
                    
                    progress_window.after(500, progress_window.destroy)
                    messagebox.showinfo("Succ√®s", "‚úÖ Texte traduit intelligemment avec succ√®s!")
                else:
                    progress_window.destroy()
                    messagebox.showinfo("Information", "‚ÑπÔ∏è Le texte semble d√©j√† √™tre en fran√ßais")
                    
            except Exception as e:
                progress_window.destroy()
                error_message = str(e)
                messagebox.showerror("Erreur", f"Erreur lors de la traduction intelligente:\n{error_message}")
        
        # Lancer la traduction dans un thread
        thread = threading.Thread(target=translate_worker)
        thread.daemon = True
        thread.start()

    def export_for_translation(self):
        """CORRECTION: Exporte les textes pour traduction - param√®tre initialfile au lieu de initialfilename"""
        if not self.current_texts:
            messagebox.showerror("Erreur", "Aucun texte √† exporter")
            return
        
        file_path = filedialog.asksaveasfilename(
            title="Exporter pour traduction",
            defaultextension=".json",
            filetypes=[
                ("Fichiers JSON", "*.json"),
                ("Tous les fichiers", "*.*")
            ],
            initialfile=f"unity_texts_export_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"  # CORRECTION: initialfile au lieu de initialfilename
        )
        
        if file_path:
            try:
                export_data = {
                    **self.current_texts,
                    'export_date': datetime.now().isoformat(),
                    'export_version': '2.0'
                }
                
                with open(file_path, 'w', encoding='utf-8') as f:
                    json.dump(export_data, f, indent=2, ensure_ascii=False)
                
                messagebox.showinfo(
                    "Export r√©ussi",
                    f"‚úÖ Textes export√©s vers:\n{file_path}\n\n"
                    f"üìä {self.current_texts['total_texts']} textes export√©s"
                )
                print(f"üì§ Textes export√©s vers: {file_path}")
                
            except Exception as e:
                error_message = str(e)
                messagebox.showerror("Erreur d'export", f"Erreur lors de l'export:\n{error_message}")

    def import_translations(self):
        """Importe les traductions depuis un fichier"""
        file_path = filedialog.askopenfilename(
            title="Importer les traductions",
            filetypes=[
                ("Fichiers JSON", "*.json"),
                ("Tous les fichiers", "*.*")
            ]
        )
        
        if file_path:
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    imported_data = json.load(f)
                
                # V√©rifier la compatibilit√©
                if 'texts' not in imported_data:
                    messagebox.showerror("Erreur", "Format de fichier invalide")
                    return
                
                # Fusionner les traductions
                imported_texts = {t['id']: t for t in imported_data['texts']}
                updated_count = 0
                
                for text_entry in self.current_texts['texts']:
                    if text_entry['id'] in imported_texts:
                        imported_entry = imported_texts[text_entry['id']]
                        text_entry['translated_text'] = imported_entry.get('translated_text', '')
                        text_entry['is_translated'] = imported_entry.get(
                            'is_translated',
                            imported_entry.get('translated_text', '') != text_entry.get('original_text', '')
                        )
                        updated_count += 1
                
                self.update_text_list()
                self.update_stats()
                
                messagebox.showinfo(
                    "Import r√©ussi",
                    f"‚úÖ Traductions import√©es avec succ√®s!\n"
                    f"üìä Textes mis √† jour: {updated_count}/{len(imported_texts)}"
                )
                print(f"üì• Import termin√©: {updated_count} textes mis √† jour")
                
            except Exception as e:
                error_message = str(e)
                messagebox.showerror("Erreur d'import", f"Erreur lors de l'import:\n{error_message}")

    def save_current_texts(self):
        """CORRECTION: Sauvegarde l'√©tat actuel des textes avec encodage UTF-8 explicite"""
        if not self.current_texts:
            messagebox.showerror("Erreur", "Aucun texte √† sauvegarder")
            return
        
        try:
            # Ajouter des m√©tadonn√©es de sauvegarde
            save_data = {
                **self.current_texts,
                'last_save_date': datetime.now().isoformat(),
                'save_version': '2.0'
            }
            
            # CORRECTION: Encodage UTF-8 explicite et gestion des erreurs
            with open("current_texts.json", 'w', encoding='utf-8', errors='replace') as f:
                json.dump(save_data, f, indent=2, ensure_ascii=False)
            
            print("üíæ Textes sauvegard√©s dans current_texts.json")
            
            if hasattr(self, 'confirm_actions_var') and not self.confirm_actions_var.get():
                # Sauvegarde silencieuse si les confirmations sont d√©sactiv√©es
                pass
            else:
                messagebox.showinfo("Sauvegarde r√©ussie", "üíæ Textes sauvegard√©s dans current_texts.json")
                
        except UnicodeEncodeError as e:
            print(f"‚ùå Erreur d'encodage lors de la sauvegarde: {e}")
            messagebox.showerror("Erreur de sauvegarde", 
                f"Erreur d'encodage lors de la sauvegarde.\n"
                f"Certains caract√®res ne peuvent pas √™tre sauv√©s.\n"
                f"D√©tails: {e}")
        except Exception as e:
            error_message = str(e)
            print(f"‚ùå Erreur lors de la sauvegarde: {error_message}")
            messagebox.showerror("Erreur de sauvegarde", f"Erreur lors de la sauvegarde:\n{error_message}")

    def load_scan(self):
        """Charge un scan existant"""
        file_path = filedialog.askopenfilename(
            title="Charger un scan existant",
            filetypes=[
                ("Fichiers JSON", "*.json"),
                ("Tous les fichiers", "*.*")
            ]
        )
        
        if file_path:
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    self.current_texts = json.load(f)
                
                # V√©rifier le format
                if 'texts' not in self.current_texts:
                    messagebox.showerror("Erreur", "Format de fichier invalide")
                    return
                
                # Mettre √† jour le chemin du jeu
                if 'game_path' in self.current_texts:
                    self.game_path.set(self.current_texts['game_path'])
                
                # Activer les onglets
                self.notebook.tab(1, state="normal")
                self.notebook.tab(2, state="normal")
                self.notebook.select(1)
                
                # Mettre √† jour l'interface
                self.update_text_list()
                self.update_stats()
                self.update_status_indicator("Scan charg√©", 'green')
                
                messagebox.showinfo(
                    "Chargement r√©ussi",
                    f"‚úÖ Scan charg√© avec succ√®s!\n"
                    f"üìä Textes trouv√©s: {self.current_texts.get('total_texts', 0)}\n"
                    f"üìÖ Date du scan: {self.current_texts.get('scan_date', 'Inconnue')}"
                )
                print(f"üìÇ Scan charg√©: {self.current_texts.get('total_texts', 0)} textes")
                
            except Exception as e:
                error_message = str(e)
                messagebox.showerror("Erreur de chargement", f"Erreur lors du chargement:\n{error_message}")

    def save_scan_results(self):
        """Sauvegarde les r√©sultats du scan"""
        try:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"scan_results_{timestamp}.json"
            
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(self.current_texts, f, indent=2, ensure_ascii=False)
            
            # Cr√©er aussi une sauvegarde g√©n√©rique
            with open("scan_results.json", 'w', encoding='utf-8') as f:
                json.dump(self.current_texts, f, indent=2, ensure_ascii=False)
                
            print(f"üíæ R√©sultats du scan sauvegard√©s: {filename}")
            
        except Exception as e:
            print(f"‚ùå Erreur lors de la sauvegarde du scan: {e}")

    def start_injection(self):
        """D√©marre le processus d'injection"""
        if not self.current_texts:
            messagebox.showerror("Erreur", "Aucun texte √† injecter")
            return
        
        # V√©rifier qu'il y a des traductions
        translated_count = len([
            t for t in self.current_texts['texts'] 
            if t.get('is_translated', False)
        ])
        
        if translated_count == 0:
            messagebox.showwarning("Aucune traduction", "Aucun texte traduit √† injecter")
            return
        
        # Confirmation avec plus d'informations
        if self.confirm_actions_var.get():
            confirmation_text = (
                f"‚ö†Ô∏è CONFIRMATION D'INJECTION ‚ö†Ô∏è\n\n"
                f"Vous √™tes sur le point d'injecter {translated_count} traductions.\n"
                f"Cette op√©ration modifiera les fichiers du jeu de mani√®re PERMANENTE.\n\n"
                f"‚úÖ Une sauvegarde sera cr√©√©e: {self.create_backup_var.get()}\n"
                f"üîç V√©rification d'int√©grit√©: {self.verify_integrity_var.get()}\n"
                f"üß™ Mode test: {self.dry_run_var.get()}\n\n"
                f"Voulez-vous continuer ?"
            )
            
            result = messagebox.askyesno("Confirmation d'injection", confirmation_text)
            if not result:
                return
        
        if self.injecting:
            return
        
        if UnityTextInjector is None:
            messagebox.showerror("Erreur", "Module UnityTextInjector non disponible")
            return
        
        self.injecting = True
        self.inject_button.config(state="disabled", text="‚è≥ Injection en cours...")
        self.stop_inject_button.pack(side=tk.LEFT, padx=(10, 0))
        self.inject_progress_var.set(0)
        self.update_status_indicator("Injection en cours", 'orange')
        
        # Vider le log d'injection
        self.injection_log.delete(1.0, tk.END)
        
        # D√©marrer l'injection dans un thread
        thread = threading.Thread(target=self.run_injection)
        thread.daemon = True
        thread.start()

    def run_injection(self):
        """Ex√©cute l'injection"""
        try:
            print("üöÄ D√©but de l'injection...")
            
            # Rediriger temporairement la sortie vers le log d'injection
            original_stdout = sys.stdout
            sys.stdout = TextRedirector(self.injection_log)
            
            injector = UnityTextInjector(self.game_path.get())
            success_count = injector.inject_translations(
                self.current_texts, 
                self.update_inject_progress
            )
            
            # Restaurer la sortie normale
            sys.stdout = original_stdout
            
            self.root.after(0, lambda: self.injection_completed(success_count))
            
        except Exception as e:
            # Restaurer la sortie normale en cas d'erreur
            if 'original_stdout' in locals():
                sys.stdout = original_stdout
            
            error_message = str(e)
            print(f"‚ùå Erreur durant l'injection: {error_message}")
            self.root.after(0, lambda: self.injection_error(error_message))

    def injection_completed(self, success_count: int):
        """Appel√© quand l'injection est termin√©e"""
        self.injecting = False
        self.inject_button.config(state="normal", text="‚ö° Injecter les traductions")
        self.stop_inject_button.pack_forget()
        
        self.update_inject_progress(100, f"‚úÖ Injection termin√©e! {success_count} textes inject√©s")
        self.update_status_indicator("Injection termin√©e", 'green')
        
        messagebox.showinfo(
            "Injection termin√©e",
            f"‚úÖ Injection termin√©e avec succ√®s!\n\n"
            f"üìä Textes inject√©s: {success_count}\n"
            f"üìÇ Sauvegardes cr√©√©es dans: backups/\n\n"
            f"üéÆ Vous pouvez maintenant tester le jeu avec les traductions."
        )
        
        print(f"‚úÖ Injection termin√©e: {success_count} textes inject√©s")

    def injection_error(self, error_msg: str):
        """Appel√© en cas d'erreur durant l'injection"""
        self.injecting = False
        self.inject_button.config(state="normal", text="‚ö° Injecter les traductions")
        self.stop_inject_button.pack_forget()
        
        self.update_inject_progress(0, "‚ùå Erreur durant l'injection")
        self.update_status_indicator("Erreur d'injection", 'red')
        
        messagebox.showerror("Erreur d'injection", f"‚ùå Erreur durant l'injection:\n{error_msg}")

    def update_inject_progress(self, value: float, status: str):
        """Met √† jour la barre de progression d'injection de mani√®re thread-safe"""
        self.root.after(0, lambda: self._update_inject_progress_ui(value, status))

    def _update_inject_progress_ui(self, value: float, status: str):
        """Met √† jour l'interface de progression d'injection"""
        self.inject_progress_var.set(value)
        self.inject_status_label.config(text=status)

    def run(self):
        """Lance l'application"""
        try:
            print("üöÄ D√©marrage de Unity Text Manager v2.0")
            self.root.mainloop()
        except KeyboardInterrupt:
            print("‚èπÔ∏è Fermeture demand√©e par l'utilisateur")
        except Exception as e:
            print(f"‚ùå Erreur fatale: {e}")
            messagebox.showerror("Erreur fatale", f"Une erreur critique s'est produite:\n{e}")


def main():
    """Point d'entr√©e principal avec v√©rifications am√©lior√©es"""
    print("=" * 60)
    print("Unity Text Manager v2.0 - D√©marrage")
    print("=" * 60)
    
    # V√©rifier les d√©pendances principales
    missing_deps = []
    
    try:
        import UnityPy
        print("‚úÖ UnityPy disponible")
    except ImportError:
        missing_deps.append("UnityPy")
        print("‚ùå UnityPy manquant")
    
    try:
        import tkinter
        print("‚úÖ Tkinter disponible")
    except ImportError:
        missing_deps.append("tkinter")
        print("‚ùå Tkinter manquant")
    
    if missing_deps:
        print(f"\n‚ùå D√©pendances manquantes: {', '.join(missing_deps)}")
        print("Installez les d√©pendances avec:")
        print("pip install UnityPy")
        if 'tkinter' in missing_deps:
            print("sudo apt-get install python3-tk  # Sur Ubuntu/Debian")
        input("\nAppuyez sur Entr√©e pour fermer...")
        sys.exit(1)
    
    # Informer sur les d√©pendances optionnelles
    if INTELLIGENT_TRANSLATOR_AVAILABLE:
        print("‚úÖ Traduction intelligente activ√©e")
    elif OPENAI_AVAILABLE:
        print("‚úÖ OpenAI disponible - Traduction automatique activ√©e")
    else:
        print("‚ö†Ô∏è Traduction non disponible")
        print("Pour activer: pip install openai langdetect")
    
    print("\nüöÄ Lancement de l'interface graphique...")
    
    # Lancer l'application
    try:
        app = UnityTextManagerGUI()
        app.run()
    except Exception as e:
        print(f"\n‚ùå Erreur fatale: {e}")
        messagebox.showerror("Erreur fatale", f"Impossible de d√©marrer l'application:\n{e}")
        input("Appuyez sur Entr√©e pour fermer...")
        sys.exit(1)


if __name__ == "__main__":
    main()